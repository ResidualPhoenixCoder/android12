package com.example.android12.GUIBoard;

import java.util.ArrayList;
import java.util.HashMap;

import Board.board;
import Pieces.Piece;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Point;
import android.support.v7.app.ActionBarActivity;
import android.view.Display;
import android.view.View;
import android.widget.Button;
import android.widget.GridLayout;
import android.widget.ImageButton;

import com.example.android12.R;

public class GUIChessBoard extends View implements IChessBoard {
	private HashMap<String, Button> controls;
	private ArrayList<Square> squares;
	private Context parent;
	
	public GUIChessBoard(Context context) {
		super(context);
		parent = context;
		squares = new ArrayList<Square>();
		ActionBarActivity activity = (ActionBarActivity)context;
		this.controls = new HashMap<String, Button>();
		GridLayout chessBoardView = (GridLayout)activity.findViewById(R.id.chessboard);
		chessBoardView.setColumnCount(8);
        chessBoardView.setRowCount(8);
     /*   Display display =activity.getWindowManager().getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        int width = size.x;
        int height = size.y;
        if(width>height){
        	width = height;
        }
        for(int i = 0; i < 8; i++) {
        	for(int j = 0; j < 8; j++) {
        				
//        		String pce = b.board[i][j];
        		String pos = board.let[j]+i;
        		ImageButton square = new ImageButton(context);
        		
        		if((i+j)%2==0){
        			square.setBackgroundColor(Color.LTGRAY);
        		}
        		else{
        			square.setBackgroundColor(Color.DKGRAY);
        		}
        		GridLayout.LayoutParams param =new GridLayout.LayoutParams();
        		param.rowSpec = GridLayout.spec(i);
        		param.columnSpec = GridLayout.spec(j);
        		param.width = width/8;
        		param.height = param.width;
        		square.setLayoutParams(param);
        		chessBoardView.addView(square);
        
        	}
        }*/
		
		Draw(new board());
        
	}

	@Override
	public void registerPositionAL(OnClickListener al) {
		// TODO Auto-generated method stub
		setOnClickListener(al);
	}

	@Override
	public void registerMajorBoardActionsAL(String name_of_action,
			OnClickListener al) {
		/*
		 * TODO Need following buttons:
		 * + Forward (Replay)
		 * + Backward
		 * + AI - Random Selection (meaning first selection) of a Legal Move (Shit)
		 * + Draw
		 * + Resign
		 */
	}

	@Override
	public void Draw(board b) {
		// TODO Auto-generated method stub
		GridLayout chessBoardView = (GridLayout)((ActionBarActivity)parent).findViewById(R.id.chessboard);
		String[][] txtBoard = b.board;
        Display display =((ActionBarActivity)parent).getWindowManager().getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        int width = size.x;
        int height = size.y;
        if(width>height){
        	width = height;
        }
		for(int i = 0;i<txtBoard.length;i++){
			for(int j = 0; j<txtBoard[0].length;j++){
				String pos = board.let[j]+(i+1);
				Piece p = null;
				for(Piece pce:b.WhiteP){
					if(pce.getPos().equals(pos)){
						p = pce;
					}
				}
				if(p==null){
					for(Piece pce:b.BlackP){
						if(pce.getPos().equals(pos)){
							p = pce;
						}
				}
				
//				Square sq = new Square(parent, p, pos);
				ImageButton sq = new ImageButton(parent);
				GridLayout.LayoutParams param =new GridLayout.LayoutParams();
        		param.rowSpec = GridLayout.spec(i);
        		param.columnSpec = GridLayout.spec(j);
        		param.width = width/8;
        		param.height = param.width;
        		sq.setLayoutParams(param);
        		chessBoardView.addView(sq);
//        		squares.add(sq);
			}
		}
		
		
	}
		
		
	}
}
